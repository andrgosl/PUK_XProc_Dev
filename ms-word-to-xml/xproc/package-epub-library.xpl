<?xml version="1.0" encoding="UTF-8"?>
<p:library xmlns:p="http://www.w3.org/ns/xproc" xmlns:epub="http://www.corbas.net/ns/epub"
    xmlns:cx="http://xmlcalabash.com/ns/extensions"
    xmlns:cxf="http://xmlcalabash.com/ns/extensions/fileutils"
    xmlns:c="http://www.w3.org/ns/xproc-step" version="1.0">

    <p:documentation>
        <div xmlns="http://www.w3.org/1999/xhtml">
            <p>This module can be used to generate an EPUB zip file from the ouput of an XSLT
            transformation. It works on the files generated from transforming XML to HTMl and the
            various manifest files for EPUB. There is an assumption that no further transformation
            is required and that the files on disk fully represent the final EPUB.</p>
            <h2>External options used by steps in this module.</h2>
            <h3>epub-path</h3>
            <p>This is the full filesystem path to the epub file. This has to be a path rather than
                a URI at the moment as cx:zip requires paths.</p>
            <h3>content-dir</h3>
            <p>This is the directory to which all content (including the OPF file) is written in the
                EPUB zip file.</p>
            <h2>xml:base</h2>
            <p>It is important to ensure a meaningful xml:base for the package file that allows the
                content files referred to be located. If the package file is generated by an earlier
                step it might be necessary to set one manually on the root element of the package.
                In order to keep EPUB processing sane any xml:base attribute on the root of the
                package file is stripped off before it is written to the EPUB file.</p>
        </div>
    </p:documentation>


    <p:import href="ng-library.xpl"/>

    <p:declare-step name="write-mimetype" type="epub:write-mimetype">

        <p:output port="result" primary="true">
            <p:pipe port="result" step="store-mimetype"/>
        </p:output>

        <p:documentation>
            <div xmlns="http://www.w3.org/1999/xhtml">
                <p>Writes the mimetype file to disk. The only information required is the directory
                    to which it should be written. Returns a <code>c:result</code> element that
                    gives the full url for the file. </p>
                <p>The file is written to a temp file that is removed on script exit.</p>
            </div>
        </p:documentation>

        <!-- create a temporary file we can use to store the mimetype file -->
        <cxf:tempfile href="./" prefix="mimetype" suffix=".tmp" name="temp-mimetype-file"
            delete-on-exit="true"/>

        <!-- use an identity here because the output from cfx:tempfile is not primary and 
            we want the context for the next step to use it so we can extract info from
            it with xpath -->
        <p:identity>
            <p:input port="source">
                <p:pipe port="result" step="temp-mimetype-file"/>
            </p:input>
        </p:identity>

        <!-- get the file name and store the mimetype string to it -->
        <p:store method="text" name="store-mimetype">
            <p:with-option name="href" select="//c:result"/>
            <p:input port="source">
                <p:inline><doc>application/epub+zip</doc></p:inline>
            </p:input>
        </p:store>

    </p:declare-step>

    <p:declare-step name="write-container" type="epub:write-container">

        <p:output port="result" primary="true">
            <p:pipe port="result" step="store-container"/>
        </p:output>

        <p:documentation>
            <div xmlns="http://www.w3.org/1999/xhtml">
                <p>Writes the container.xml file to disk.</p>
                <p>The file is written to a temp file that is removed on script exit. Returns a
                        <code>c:result</code> element containing the path for the file.</p>
            </div>
            <h3>Options</h3>
            <dl>
                <dt>opf-uri</dt>
                <dd>The relative URI from the root of the zip file to the package file. This is
                    stored in the <code>container.xml</code> file. This defaults to
                        <code>OPS/package.opf</code>.</dd>
            </dl>
        </p:documentation>

        <p:option name="opf-uri" select="'OPS/package.opf'"/>

        <!-- Create the container file itself. Can't make the obvious method with p:template work. -->
        <p:xslt name="container-xml" version="2.0">

            <p:with-param name="opf-uri" select="$opf-uri"/>

            <p:input port="source">
                <p:inline>
                    <epub:dummy/>
                </p:inline>
            </p:input>

            <p:input port="parameters">
                <p:empty/>
            </p:input>


            <p:input port="stylesheet">
                <p:inline>
                    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                        xmlns:c="http://www.w3.org/ns/xproc-step">
                        <xsl:param name="opf-uri"/>
                        <xsl:template match="/">
                            <container version="1.0"
                                xmlns="urn:oasis:names:tc:opendocument:xmlns:container">
                                <rootfiles>
                                    <rootfile full-path="{$opf-uri}"
                                        media-type="application/oebps-package+xml"/>
                                </rootfiles>
                            </container>
                        </xsl:template>
                    </xsl:stylesheet>
                </p:inline>
            </p:input>


        </p:xslt>

        <!-- create a temporary file we can use to store the mimetype file -->
        <cxf:tempfile href="./" prefix="container" suffix=".xml" name="temp-container-file"
            delete-on-exit="true"/>

        <!-- use an identity here because the output from cfx:tempfile is not primary and 
            we want the context for the next step to use it so we can extract info from
            it with xpath -->
        <p:identity name="container-identity">
            <p:input port="source">
                <p:pipe port="result" step="temp-container-file"/>
            </p:input>
        </p:identity>


        <!-- get the file name and store the mimetype string to it -->
        <p:store method="xml" name="store-container">
            <p:with-option name="href" select="//c:result"/>
            <p:input port="source">
                <p:pipe port="result" step="container-xml"/>
            </p:input>
        </p:store>

    </p:declare-step>

    <p:declare-step name="init-epub" type="epub:init-epub">
        <p:documentation>
            <div xmlns="http://www.w3.org/1999/xhtml">
                <p>Writes the initial zip file for the EPUB. The initial zip file will contain the
                        <code>mimetype</code> file and <code>META-INF/container.xml</code> file
                    only.</p>
                <h3>Options</h3>
                <dl>
                    <dt>uri</dt>
                    <dd>Path to which the zip file should be written</dd>
                    <dt>opf-uri</dt>
                    <dd>Relative url for the OPF file, defaults to <pre>OPS/package.opf</pre></dd>
                </dl>
                <h3>Result</h3>
                <p>Returns a <code>cx:zipfile</code> element describing the zip file.</p>
            </div>
        </p:documentation>

        <p:output port="result" primary="true">
            <p:pipe port="result" step="create-epub-file"/>
        </p:output>

        <p:option name="uri" required="true"/>
        <p:option name="opf-uri" select="'OPS/package.opf'"/>
        

        <!-- first thing we need to do is create the temp files -->
        <epub:write-mimetype name="temp-mimetype"/>
        <epub:write-container name="temp-container">
            <p:with-option name="opf-uri" select="$opf-uri"/>
        </epub:write-container>

        <!-- now we need to combine those two -->
        <p:pack wrapper="epub:result-wrapper" name="wrap-files">
            <p:input port="source">
                <p:pipe port="result" step="temp-mimetype"/>
            </p:input>
            <p:input port="alternate">
                <p:pipe port="result" step="temp-container"/>
            </p:input>
        </p:pack>

        <!-- use that as the input to a p:xslt that creates the c:zip-manifest -->
        <p:xslt version="2.0" name="create-manifest">

            <p:input port="parameters">
                <p:empty/>
            </p:input>

            <p:input port="source">
                <p:pipe port="result" step="wrap-files"/>
            </p:input>

            <p:input port="stylesheet">
                <p:inline>
                    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                        xmlns:c="http://www.w3.org/ns/xproc-step"
                        xmlns:epub="http://www.corbas.net/ns/epub" exclude-result-prefixes="#all">

                        <xsl:template match="/">
                            <c:zip-manifest>
                                <xsl:apply-templates/>
                            </c:zip-manifest>
                        </xsl:template>

                        <xsl:template match="c:result[matches(., 'mimetype')]">
                            <c:entry href="{.}" name="mimetype" compression-method="stored"/>
                        </xsl:template>

                        <xsl:template match="c:result[matches(., 'container')]">
                            <c:entry href="{.}" name="META-INF/container.xml"/>
                        </xsl:template>

                    </xsl:stylesheet>
                </p:inline>
            </p:input>

        </p:xslt>

        <!-- Finally! Write the file -->
        <cx:zip name="create-epub-file">

            <p:input port="source">
                <p:empty/>
            </p:input>

            <p:input port="manifest">
                <p:pipe port="result" step="create-manifest"/>
            </p:input>

            <p:with-option name="command" select="'create'"/>
            <p:with-option name="href" select="$uri"/>

        </cx:zip>

    </p:declare-step>

    <p:declare-step name="convert-opf-to-zip-manifest" type="epub:convert-opf-to-zip-manifest">
        <p:documentation>
            <div xmlns="http://www.w3.org/1999/xhtml">
                <p>Given an OPF document, takes the manifest section of the file and converts it to
                    a zip file manifest. The file name is resolved to an absolute url for the
                        <code>href</code> attribute of the manifest and the prefix is prepended to
                    create the <code>name</code> attribute.</p>
                <p>The OPF file should be the input to the step (on the <code>source</code> input </p>
                <h3>Options</h3>
                <dl>
                    <dt>content-dir</dt>
                    <dd>The prefix to prepend to the manifest href to create the name attribute. OPF
                        manifests are relative to the OPF file whils the zip manifest must be
                        relative to EPUB root.</dd>
                </dl>
            </div>
        </p:documentation>

        <p:input port="source" primary="true"/>
        <p:output port="result" primary="true">
            <p:pipe port="result" step="transform-manifest"/>
        </p:output>

        <p:option name="content-dir" required="true"/>
        <p:option name="opf-uri" required="true"/>

        <!-- convert the epub manifest to a zip manifest, setting the xml:base so that files are
            found in the right locations -->
        <p:xslt version="2.0" name="transform-manifest">

            <p:with-param name="content-dir" select="$content-dir"/>
            <p:with-param name="opf-uri" select="$opf-uri"/>

            <p:input port="source">
                <p:pipe port="source" step="convert-opf-to-zip-manifest"/>
            </p:input>

            <p:input port="parameters">
                <p:empty/>
            </p:input>

            <p:input port="stylesheet">


                <p:inline>
                    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                        xmlns:opf="http://www.idpf.org/2007/opf"
                        xmlns:c="http://www.w3.org/ns/xproc-step" exclude-result-prefixes="#all">

                        <xsl:param name="content-dir"/>
                        <xsl:param name="opf-uri"/>

                        <xsl:template match="/">
                            <xsl:apply-templates select="/opf:package/opf:manifest"/>
                        </xsl:template>

                        <xsl:template match="opf:manifest">
                            <c:zip-manifest xml:base="{base-uri(.)}">
                                <c:entry href="{base-uri(.)}" name="{$opf-uri}"/>                                
                                <xsl:apply-templates/>
                            </c:zip-manifest>
                        </xsl:template>

                        <xsl:template match="opf:item">
                            <xsl:variable name="path" select="concat($content-dir, '/', @href)"/>
                            <c:entry href="{@href}" name="{$path}"/>
                        </xsl:template>

                    </xsl:stylesheet>
                </p:inline>
            </p:input>
        </p:xslt>

    </p:declare-step>


    <p:declare-step name="package-epub" type="epub:package-epub">
        <p:documentation>
            <div xmlns="http://www.w3.org/1999/xhtml">
                <p>Given an input of an OPF file, creates an EPUB file. The caller must
                provide the path to the EPUB file and the name of the directory into which
                content must be stored.</p>
                <h3>Options</h3>
                <dl>
                    <dt>content-dir</dt>
                    <dd>Name of the directory into which all content (including the OPF file)
                    will be stored in the zip file. Defaults to <pre>OPS</pre>.</dd>
                    <dt>package-file</dt>
                    <dd>The file name for the package file. Defaults to <pre>package.opf</pre></dd>
                    <dt>epub-path</dt>
                    <dd>The full path to the epub-file to be created.</dd>
                </dl>
            </div>
        </p:documentation>
        
        <p:input port="source" primary="true"/>
        <p:output port="result" primary="true">
            <p:pipe port="result" step="package-epub-result"/>
        </p:output>
        
        <p:option name="content-dir" select="'OPS'"/>
        <p:option name="package-file" select="'package.opf'"/>
        <p:option name="epub-path"  required="true"/>
    
        <p:variable name="opf-uri" select="concat($content-dir, '/', $package-file)"/>
        <p:variable name="opf-base" select="p:base-uri()"/>
    
        <epub:init-epub>
            <p:with-option name="uri" select="$epub-path"/>
            <p:with-option name="opf-uri" select="$opf-uri"/>
        </epub:init-epub>
                
        <epub:convert-opf-to-zip-manifest name='create-content-manifest'>
            <p:input port="source">
                <p:pipe port="source" step="package-epub"/>
            </p:input>
            <p:with-option name="content-dir" select="$content-dir"/>
            <p:with-option name="opf-uri" select="$opf-uri"/>
        </epub:convert-opf-to-zip-manifest>
        

        <!-- construct the zip manifest for adding the epub manifest to the zip -->
        <p:xslt version="2.0" name="create-manifest-manifest">
            <p:input port="parameters">
                <p:empty/>
            </p:input>
            <p:input port="source">
                <p:inline>
                    <c:zip-manifest>
                        <c:entry href="@@@@" name="@@@@"/>
                    </c:zip-manifest>                                        
                </p:inline>
            </p:input>
            <p:input port="stylesheet">
                <p:inline>
                    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                        xmlns:opf="http://www.idpf.org/2007/opf"
                        xmlns:c="http://www.w3.org/ns/xproc-step" exclude-result-prefixes="#all">
                        
                        <xsl:param name="opf-uri"/>
                        <xsl:param name="base"/>
                        
                        <xsl:template match="@*|node()">
                            <xsl:copy>
                                <xsl:apply-templates select="@*|node()"/>
                            </xsl:copy>
                        </xsl:template>
                
                        <xsl:template match="@href">
                            <xsl:attribute name="href" select="$base"/>
                        </xsl:template>
                        
                        <xsl:template match="@name">
                            <xsl:attribute name="name" select="$opf-uri"/>
                        </xsl:template>
                        
                    </xsl:stylesheet>                    
                </p:inline>
            </p:input>
            
            <p:with-param name="opf-uri" select="$opf-uri"/>
            <p:with-param name="base" select="$opf-base"/>
            
        </p:xslt>
        

        
        <!-- now add all the other content to the zip file -->
        <cx:zip name="insert-content">            
            <p:input port="source">
               <p:pipe port="source" step="package-epub"/>
            </p:input>
            <p:input port="manifest">
                <p:pipe port="result" step="create-content-manifest"/>
            </p:input>
            <p:with-option name="href" select="$epub-path"/>
            <p:with-option name="command" select="'update'"/>
            </cx:zip>
        
        <p:sink/>
        
        <p:identity name='package-epub-result'>
            <p:input port="source">
                <p:pipe port="result" step="create-manifest-manifest"/>
            </p:input>
        </p:identity>
        
        
    </p:declare-step>


</p:library>
